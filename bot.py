import os
import re
import logging
from typing import Dict, List
from dotenv import load_dotenv
import aiosqlite
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import google.generativeai as genai
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
# –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
for logger_name in ['apscheduler', 'httpx', 'telegram.ext', 'telegram.bot']:
    logging.getLogger(logger_name).setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "telegram_token": os.getenv("TELEGRAM_TOKEN"),
    "gemini_api_key": os.getenv("GEMINI_API_KEY"),
    "max_history_length": int(os.getenv("MAX_HISTORY_LENGTH", 5)),
    "db_path": "story_bot.db"
}

# Initialize Gemini
if not CONFIG["gemini_api_key"]:
    raise ValueError("GEMINI_API_KEY environment variable is not set")
genai.configure(api_key=CONFIG["gemini_api_key"])


class Database:
    def __init__(self):
        self.db_path = CONFIG["db_path"]

    async def init_db(self):
        async with aiosqlite.connect(self.db_path) as conn:
            # Create the table if it doesn't exist
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    context TEXT,
                    history TEXT,
                    saw_welcome BOOLEAN DEFAULT 0
                )
            ''')

            # Check if saw_welcome column exists
            cursor = await conn.execute("PRAGMA table_info(users)")
            columns = await cursor.fetchall()
            column_names = [column[1] for column in columns]

            # Add saw_welcome column if it doesn't exist
            if 'saw_welcome' not in column_names:
                await conn.execute('ALTER TABLE users ADD COLUMN saw_welcome BOOLEAN DEFAULT 0')

            await conn.commit()
    async def get_user_context(self, user_id: int) -> Dict:
        try:
            async with aiosqlite.connect(self.db_path) as conn:
                cursor = await conn.execute(
                    'SELECT context, history, saw_welcome FROM users WHERE user_id = ?',
                    (user_id,)
                )
                result = await cursor.fetchone()
                return {
                    "context": result[0] if result else "",
                    "history": result[1].split('|') if result and result[1] else [],
                    "saw_welcome": bool(result[2]) if result else False
                } if result else {"context": "", "history": [], "saw_welcome": False}
        except Exception as e:
            logger.error(f"Database error in get_user_context: {e}")
            return {"context": "", "history": [], "saw_welcome": False}
    async def update_user_context(self, user_id: int, context: str, history: List[str], saw_welcome: bool = None):
        try:
            async with aiosqlite.connect(self.db_path) as conn:
                history_str = '|'.join(history[-CONFIG["max_history_length"]:])
                if saw_welcome is not None:
                    await conn.execute(
                        '''INSERT OR REPLACE INTO users (user_id, context, history, saw_welcome)
                           VALUES (?, ?, ?, ?)''',
                        (user_id, context, history_str, saw_welcome)
                    )
                else:
                    await conn.execute(
                        '''INSERT OR REPLACE INTO users (user_id, context, history)
                           VALUES (?, ?, ?)''',
                        (user_id, context, history_str)
                    )
                await conn.commit()
        except Exception as e:
            logger.error(f"Database error in update_user_context: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            try:
                old_context = await self.get_user_context(user_id)
                logger.info(f"Restored previous context for user {user_id}")
            except Exception as restore_error:
                logger.error(f"Failed to restore context: {restore_error}")
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_database():
    db = Database()
    await db.init_db()
    return db


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Gemini
class StoryParser:
    @staticmethod
    def parse_response(text: str) -> tuple:
        try:
            # Split by sections
            sections = text.split("[–í–ê–†–ò–ê–ù–¢–´]")
            if len(sections) != 2:
                sections = text.split("[–û–ü–ò–°–ê–ù–ò–ï]")
                if len(sections) > 1:
                    description = sections[1]
                    options_text = sections[-1]
                else:
                    raise ValueError("Could not find sections")
            else:
                description = sections[0].replace("[–û–ü–ò–°–ê–ù–ò–ï]", "").strip()
                options_text = sections[1].strip()

            # Clean up description
            description = description.strip()

            # Extract options using more robust pattern matching
            options = []
            lines = options_text.split('\n')
            for line in lines:
                # Remove markdown formatting and special characters
                line = re.sub(r'[*_~`]', '', line)  # Remove markdown formatting
                line = re.sub(r'^\d+\.?\s*', '', line.strip())  # Remove numbering
                line = re.sub(r'^\s*[‚Ä¢\-‚òÖ]\s*', '', line)  # Remove bullet points

                # Split by pipe if present
                if '|' in line:
                    parts = [p.strip() for p in line.split('|')]
                    options.extend(p for p in parts if p and not p.isspace())
                # Add non-empty lines
                elif line and not line.isspace():
                    options.append(line)

            # Clean up and format options
            # Clean up and format options
            cleaned_options = []
            for opt in options[:3]:  # Limit to 3 options
                try:
                    # Clean up the option text
                    opt = re.sub(r'[*_~`]', '', opt.strip())  # Remove markdown
                    opt = re.sub(r'^\d+\.?\s*', '', opt)  # Remove numbers
                    opt = opt.strip()
                    # Add emoji and limit length if option is valid
                    if opt and not opt.isspace() and len(opt) <= 25:
                        cleaned_options.append(f"üî∏ {opt}")
                    elif opt and not opt.isspace():
                        cleaned_options.append(f"üî∏ {opt[:25]}")
                except Exception as e:
                    logger.error(f"Error processing option: {e}")

            # If we don't have enough valid options, add some defaults
            default_options = ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ–¥–∫—É", "–ü–æ–∏—Å–∫–∞—Ç—å –ø—Ä–∏–ø–∞—Å—ã", "–ù–∞–π—Ç–∏ —É–∫—Ä—ã—Ç–∏–µ"]
            while len(cleaned_options) < 3:
                cleaned_options.append(f"üî∏ {default_options[len(cleaned_options) - 1]}")
            return description, cleaned_options
        except Exception as e:
            logger.error(f"Error parsing response: {str(e)}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.", ["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]

class StoryGenerator:
    # Class-level model instance
    model = genai.GenerativeModel('gemini-pro')

    # Forbidden content patterns (—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
    forbidden_patterns = [
        r'\b(—É–±–∏–π—Å—Ç–≤[–æ–∞]|—Ç—Ä—É–ø[—ã–∞]|—Ä–∞—Å—á–ª–µ–Ω–µ–Ω–∏[–µ—è])\b',
        r'\b(–ø—ã—Ç–∫[–∏–∞]|–∏–∑–¥–µ–≤–∞—Ç–µ–ª—å—Å—Ç–≤[–æ–∞])\b',
        r'\b(—Å—É–∏—Ü–∏–¥|—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤[–æ–∞])\b'
    ]

    # Allowed content patterns (–¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å)
    allowed_patterns = [
        r'\b(–æ—Ç–±–∏–ª—Å—è|–∑–∞—â–∏—Ç–∏–ª—Å—è|—Å–ø—Ä—è—Ç–∞–ª—Å—è)\b',
        r'\b(—Ä–∞–Ω–µ–Ω–∏–µ|—Ü–∞—Ä–∞–ø–∏–Ω–∞|—É—à–∏–±)\b',
        r'\b(–æ–ø–∞—Å–Ω–æ—Å—Ç—å|—É–≥—Ä–æ–∑–∞|—Ä–∏—Å–∫)\b'
    ]

    # Configure safety settings
    safety_settings = [
        {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
        {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
    ]

    # Configure generation parameters
    generation_config = {
        "temperature": 0.7,
        "top_p": 0.8,
        "top_k": 40,
        "max_output_tokens": 1024,
    }
    @staticmethod
    async def generate_story(db: Database, user_id: int, choice: str = "") -> dict:
        user_data = await db.get_user_context(user_id)

        history_text = ' -> '.join(user_data['history']) if user_data['history'] else ""
        current_context = user_data['context'] if user_data['context'] else '–ù–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏: –¢—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –æ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∑–≤—É–∫–æ–≤ –∑–∞ –æ–∫–Ω–æ–º. –¢–µ–ª–µ—Ñ–æ–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∞ –Ω–∞ —É–ª–∏—Ü–∞—Ö —Å–ª—ã—à–Ω—ã —Å–∏—Ä–µ–Ω—ã –∏ –∫—Ä–∏–∫–∏. –í –Ω–æ–≤–æ—Å—Ç—è—Ö –≥–æ–≤–æ—Ä–∏–ª–∏ –æ –∫–∞–∫–æ–π-—Ç–æ —ç–ø–∏–¥–µ–º–∏–∏.'
        choice_text = f"–í–´–ë–û–† –ò–ì–†–û–ö–ê: {choice}" if choice else ""

        prompt = f"""
        [–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –∏–≥—Ä—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 12+]
        
        –¢—ã ‚Äî —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –≤ –∂–∞–Ω—Ä–µ –∑–æ–º–±–∏-–≤—ã–∂–∏–≤–∞–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é –≤—ã–∂–∏–≤–∞–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ –≤–æ –≤—Ä–µ–º—è –∑–æ–º–±–∏-–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞.

        **–û—Å–Ω–æ–≤–Ω–æ–π —Å—é–∂–µ—Ç:**
        –ì–æ—Ä–æ–¥ –æ—Ö–≤–∞—á–µ–Ω —ç–ø–∏–¥–µ–º–∏–µ–π, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–µ–π –ª—é–¥–µ–π –≤ –∑–æ–º–±–∏. –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–∂–∏—Ç—å, –∏–∑–±–µ–≥–∞—è –ø—Ä—è–º—ã—Ö —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π, 
        –Ω–∞—Ö–æ–¥—è –ø—Ä–∏–ø–∞—Å—ã –∏ –ø–æ–º–æ–≥–∞—è –¥—Ä—É–≥–∏–º –≤—ã–∂–∏–≤—à–∏–º. –ê–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏ –∏ —É–º–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
        
        **–î–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**
        - –ó–æ–º–±–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ ("–º–µ–¥–ª–µ–Ω–Ω–æ –¥–≤–∏–∂—É—â–∏–µ—Å—è —Ñ–∏–≥—É—Ä—ã", "—Å—Ç—Ä–∞–Ω–Ω—ã–µ –ª—é–¥–∏")
        - –ú–æ–∂–Ω–æ —É–±–µ–≥–∞—Ç—å, –ø—Ä—è—Ç–∞—Ç—å—Å—è, –æ—Ç–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ
        - –õ–µ–≥–∫–∞—è —Å–∞–º–æ–æ–±–æ—Ä–æ–Ω–∞ (–æ—Ç—Ç–æ–ª–∫–Ω—É—Ç—å, —É–≤–µ—Ä–Ω—É—Ç—å—Å—è)
        - –ü–æ–∏—Å–∫ –ø—Ä–∏–ø–∞—Å–æ–≤ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–µ—Å—Ç
        
        **–ó–∞–ø—Ä–µ—â–µ–Ω–æ:**
        - –ö—Ä–æ–≤—å –∏ —Ä–∞—Å—á–ª–µ–Ω—ë–Ω–∫–∞
        - –£–±–∏–π—Å—Ç–≤–∞ (–¥–∞–∂–µ –∑–æ–º–±–∏)
        - –¢—è–∂—ë–ª—ã–µ —Ç—Ä–∞–≤–º—ã
        
        **–°—Ç–∏–ª—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è:**
        1. –û–ø–∏—Å–∞–Ω–∏–µ: 2-3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 150 —Å–∏–º–≤–æ–ª–æ–≤)
        2. –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π: 
           - –¢–æ—á–Ω–æ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ 20-25 —Å–∏–º–≤–æ–ª–æ–≤
           - –ù–∞—á–∏–Ω–∞—Ç—å —Å –≥–ª–∞–≥–æ–ª–∞
           - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
           - –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–∏ –∏ –ø–æ–º–æ—â–∏
        
        **–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:**
        {current_context}
        
        **–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:**
        {history_text}
        
        **–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä:**
        {choice_text}
        
        **–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:**
        [–û–ü–ò–°–ê–ù–ò–ï]
        –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
        
        [–í–ê–†–ò–ê–ù–¢–´]
        1. –î–µ–π—Å—Ç–≤–∏–µ1 | 2. –î–µ–π—Å—Ç–≤–∏–µ2 | 3. –î–µ–π—Å—Ç–≤–∏–µ3
        
        –ü–æ–º–Ω–∏: 
        - –ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤—ã–±–æ—Ä–æ–º
        - –ò–∑–±–µ–≥–∞–π –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏, –¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ö–∏—Ç—Ä–æ—Å—Ç–∏ –∏ –Ω–∞—Ö–æ–¥—á–∏–≤–æ—Å—Ç–∏
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è, –Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ —Å—Ç—Ä–∞—Ö–∞"""

        try:
            # Generate response using class-level model with safety settings
            response = await asyncio.to_thread(
                StoryGenerator.model.generate_content,
                prompt,
                generation_config=StoryGenerator.generation_config,
                safety_settings=StoryGenerator.safety_settings
            )

            if not response or not response.text:
                raise Exception("Empty response received")

            # Check for forbidden content
            response_text = response.text.lower()
            for pattern in StoryGenerator.forbidden_patterns:
                if re.search(pattern, response_text):
                    logger.warning(f"Found forbidden content matching pattern: {pattern}")
                    return {
                        "text": "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...",
                        "options": ["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"]
                    }

            logger.info("Successfully generated response using Gemini")

            # Parse the response
            story_text, options = StoryParser.parse_response(response.text)

            # Update user context
            new_history = user_data['history'] + [choice] if choice else user_data['history']
            await db.update_user_context(user_id, story_text, new_history)

            return {
                "text": story_text,
                "options": options
            }

        except Exception as e:
            logger.error(f"Gemini generation failed: {str(e)}")
            return {
                "text": "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
                "options": []
            }

def get_base_keyboard():
    keyboard = [
        [KeyboardButton("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")],
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton("üîÑ –†–µ—Å—Ç–∞—Ä—Ç")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.bot_data['db']
    user_id = update.effective_user.id
    user_data = await db.get_user_context(user_id)

    if not user_data["saw_welcome"]:
        welcome_text = """üßü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ó–æ–º–±–∏-–ê–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å!*

–ì–æ—Ä–æ–¥ –æ—Ö–≤–∞—á–µ–Ω —ç–ø–∏–¥–µ–º–∏–µ–π. –õ—é–¥–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –∑–æ–º–±–∏, –∞ –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–∂–∏—Ç—å.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–º–µ–∫–∞–ª–∫—É, –∏–∑–±–µ–≥–∞–π—Ç–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–º–æ–≥–∞–π—Ç–µ –¥—Ä—É–≥–∏–º –≤—ã–∂–∏–≤—à–∏–º.

–ö–æ–º–∞–Ω–¥—ã:
üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞ - –ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
‚ùì –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
üìä –°—Ç–∞—Ç—É—Å - –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å
üîÑ –†–µ—Å—Ç–∞—Ä—Ç - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

–£–¥–∞—á–∏! –ò –ø–æ–º–Ω–∏—Ç–µ: –≥–ª–∞–≤–Ω–æ–µ - –≤—ã–∂–∏—Ç—å! üéØ"""
        # Send welcome message with persistent keyboard
        welcome_msg = await update.message.reply_text(
            welcome_text,
            parse_mode="Markdown",
            reply_markup=get_base_keyboard()
        )
        # Schedule message deletion after 30 seconds
        context.job_queue.run_once(
            lambda _: welcome_msg.delete(),
            30
        )
        # Update user's welcome status
        await db.update_user_context(user_id, "", [], True)
    else:
        # Send a brief message for subsequent starts
        start_msg = await update.message.reply_text(
            "üéÆ –ù–∞—á–∏–Ω–∞—é –Ω–æ–≤—É—é –∏–≥—Ä—É...",
            reply_markup=get_base_keyboard()
        )
        # Delete message after 3 seconds
        context.job_queue.run_once(
            lambda _: start_msg.delete(),
            3
        )
        await db.update_user_context(user_id, "", [])

    # Generate and send the first story response
    response = await StoryGenerator.generate_story(db, user_id)
    await send_response(update, response)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """üßü *–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤—ã–∂–∏–≤–∞–Ω–∏—é*

‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–º–æ–º - –æ—Ç –Ω–∏—Ö –∑–∞–≤–∏—Å–∏—Ç –≤–∞—à–∞ —Å—É–¥—å–±–∞
‚Ä¢ –ü–æ–º–Ω–∏—Ç–µ –æ –¥—Ä—É–≥–∏—Ö –≤—ã–∂–∏–≤—à–∏—Ö - –≤–º–µ—Å—Ç–µ —É –≤–∞—Å –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä—è–º—ã—Ö —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –∑–æ–º–±–∏
‚Ä¢ –ò—â–∏—Ç–µ –ø—Ä–∏–ø–∞—Å—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Å—Ç–∞

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å
/restart - –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ

üí° –°–æ–≤–µ—Ç: –•–∏—Ç—Ä–æ—Å—Ç—å –∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ —Å–∏–ª—ã!"""
    await update.message.reply_text(help_text, parse_mode="Markdown")
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.bot_data['db']
    user_id = update.effective_user.id
    user_data = await db.get_user_context(user_id)

    if not user_data['history']:
        await update.message.reply_text("üéØ –í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return

    history = user_data['history']
    actions_text = "–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π"
    if history:
        actions_text = "‚ûú " + "\n‚ûú ".join(history[-3:])

    status_text = f"""üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–≥—Ä–µ*

–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:
{user_data['context'][:200]}...

–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
{actions_text}

–í—Å–µ–≥–æ —Å–¥–µ–ª–∞–Ω–æ –≤—ã–±–æ—Ä–æ–≤: {len(history)}"""
    await update.message.reply_text(status_text, parse_mode="Markdown")

async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.bot_data['db']
    user_id = update.effective_user.id
    await db.update_user_context(user_id, "", [])

    # Send temporary message
    restart_msg = await update.message.reply_text("üîÑ –ò–≥—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ...")
    # Delete message after 3 seconds
    context.job_queue.run_once(
        lambda _: restart_msg.delete(),
        3
    )

    response = await StoryGenerator.generate_story(db, user_id)
    await send_response(update, response)
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.bot_data['db']
    query = update.callback_query
    user_id = query.from_user.id

    # Get the original option text from the button that was clicked
    choice = query.message.reply_markup.inline_keyboard[int(query.data.split('_')[1]) - 1][0].text

    await query.answer()
    response = await StoryGenerator.generate_story(db, user_id, choice)
    await send_response(update, response, message=query.message)

async def send_response(update: Update, response: dict, message=None):
    try:
        # Format the story text with some styling
        content = f"{response['text']}\n\nüí≠ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        # Create buttons with improved layout
        keyboard = []
        for idx, option in enumerate(response['options']):
            callback_data = f"choice_{idx + 1}"
            keyboard.append([InlineKeyboardButton(option, callback_data=callback_data)])

        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None

        if message:
            try:
                await message.edit_text(
                    text=content,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            except Exception as edit_error:
                logger.error(f"Failed to edit message: {edit_error}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                await update.message.reply_text(
                    text=content,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        else:
            await update.message.reply_text(
                text=content,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"Error in send_response: {e}")
        try:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_base_keyboard()
            )
        except Exception as fallback_error:
            logger.error(f"Failed to send error message: {fallback_error}")

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle keyboard button presses"""
    text = update.message.text
    if text == "üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞":
        await start(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üìä –°—Ç–∞—Ç—É—Å":
        await status_command(update, context)
    elif text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç":
        await restart_command(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    logger.error(f"–û—à–∏–±–∫–∞: {error}")

    # Handle message deletion errors silently
    if "Message to delete not found" in str(error):
        return

    # Check if update exists and has a message
    if update and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
    elif update and update.callback_query:
        await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
async def post_init(application):
    # Initialize database
    application.bot_data['db'] = await init_database()

    # Set up bot commands for the command menu
    commands = [
        ("start", "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"),
        ("help", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"),
        ("status", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        ("restart", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    ]
    await application.bot.set_my_commands(commands)

def main():
    try:
        app = (
            ApplicationBuilder()
            .token(CONFIG["telegram_token"])
            .post_init(post_init)
            .build()
        )

        # Add handlers
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("help", help_command))
        app.add_handler(CommandHandler("status", status_command))
        app.add_handler(CommandHandler("restart", restart_command))
        app.add_handler(CallbackQueryHandler(handle_choice))
        # Add handler for keyboard buttons
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_button))
        app.add_error_handler(error_handler)

        logger.info("Initializing Gemini API...")
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Gemini")

        # Run the bot until Ctrl+C is pressed
        app.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Critical error: {e}")
    finally:
        logger.info("Bot stopped")

if __name__ == "__main__":
    main()